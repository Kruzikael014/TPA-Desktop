import { async } from "@firebase/util";
import { addDoc, collection, onSnapshot, query, where } from "firebase/firestore";
import { useEffect, useState } from "react";
import Headers from "../components/Header";
import Taskbar from "../components/Taskbar";
import { db } from "../firebase-config";
import "./styles/AdjustSalary.css";


function AdjustSalary ()
{
    const position = sessionStorage.getItem( "department" );
    const activeid = sessionStorage.getItem( "active-user" );

    // input generated
    const [ newSalary, setNewSalary ] = useState( 0 );
    const [ reason, setReason ] = useState( "" );

    // autoGenerated (date, employee who propose, and document id)
    const [ user, setUser ] = useState( {} );


    let valid = false;
    const processData = () =>
    {
        if ( newSalary <= 0 )
        {
        } else if ( reason.length <= 0 )
        {
        } else
        {
            valid = true;
        }
        if ( valid == false )
        {
            return;
        }
        const process = async () =>
        {
            const salaryReqRef = collection( db, "SalaryChangeRequest" );
            let toBeInserted = {
                employeeid: user.id,
                requestdate: new Date( Date.now() ),
                requestreason: reason,
                finalized: "no",
                requestamount: Number( newSalary ),
                requeststatus: {
                    manager: "Waiting...",
                    hrd: "Waiting..."
                }
            };
            await addDoc( salaryReqRef, toBeInserted );
            setTimeout(() => {
                window.location.reload()
            }, 600)
        };
        process();
    };


    useEffect( () =>
    {
        // code for fetch user (user V)
        ( async function ()
        {
            return await new Promise( ( resolve, reject ) =>
            {
                let temp = [];
                const employeeRef = collection( db, "Employee" );
                const userQ = query( employeeRef, where( "id", "==", activeid ) );

                onSnapshot( userQ, ( snapshot ) =>
                {
                    snapshot.docs.forEach( ( doc ) =>
                    {
                        temp.push( { ...doc.data(), id: doc.id } );
                    } );
                    if ( temp.length !== 0 )
                    {
                        resolve( temp[ 0 ] );
                    } else
                    {
                        reject( "Failed to get user id" );
                    }
                } );
            } );
        } )().then( ( resolve ) =>
        {
            setUser( resolve );
        } ).catch( ( reject ) =>
        {
            console.log( reject );
        } );

        // code to check whether user are still able to request salary change
        ( async function ()
        {
            return await new Promise( ( resolve, reject ) =>
            {
                const approveCondition = {
                    requeststatus: {
                        finance: "Waiting...",
                        manager: "Waiting...",
                    }
                };
                const salaryReqRef = collection( db, "SalaryChangeRequest" );
                const chanceQ = query( salaryReqRef, where( "requeststatus", "==", approveCondition ) );

                onSnapshot( chanceQ, ( snapshot ) =>
                {
                    let temp = [];
                    snapshot.docs.forEach( ( doc ) =>
                    {
                        temp.push( { ...doc.data(), id: doc.id } );
                    } );

                    if ( temp.length > 0 )
                    {
                        // bisa jadi orang, bisa jadi kita, ada status waiting waiting intinya
                        reject( temp );
                    } else
                    {
                        // udah pasti boleh, karena semua doc dalam database gak ada yang waiting waiting, berarti waiting rejected, waiting accepted, semua sudah dapat hasil pasti
                        resolve( true );
                    }
                } );
            } );
        } )().then( ( resolve ) =>
        {
            setQuota( resolve );
            return;
        } ).catch( ( reject ) =>
        {
            reject.foreach( ( row ) =>
            {
                if ( row.id == user.id )
                {
                    setQuota( false );
                    return;
                }
            } );
        } );
        // console.log( quota );
    }, [] );

    const [ quota, setQuota ] = useState( false );
    const seeQuotas = () =>
    {
        // console.log( quota );
        if ( quota == true )
        {
            return (
                <div id="form-as"  >
                    <div id="name-form-as" className="font-mono font-semibold text-3xl">
                        <label htmlFor="num"> New salary </label>
                        <input id="num" type="number" onChange={ ( e ) =>
                        {
                            setNewSalary( e.target.value );
                        } } />
                    </div>
                    <div id="reason-form-as" className="font-mono font-semibold text-3xl">
                        <label htmlFor="reason">Reason</label>
                        <input type="text" id="reason" onChange={ ( e ) =>
                        {
                            setReason( e.target.value );
                        } } />
                    </div>
                    <button id="adjust-button" className="font-mono font-semibold text-2xl" onClick={ ( e ) =>
                    {
                        processData();
                    } } >Submit</button>
                </div>
            );

        } else
        {
            return (
                <div>
                    Youre not allowed to create another salary adjustment request, please wait for finance or manager to confirm your previous request
                </div>
            );
        }

    };

    return (
        <div>
            <Headers />
            <Taskbar position={ position } />
            <div id="inner-page">
                <div id="title-container">
                    <h1 id="title" className="font-mono font-semibold text-3xl">
                        Salary Adjustment Request Form
                    </h1>
                </div>
                {
                    seeQuotas()
                }
            </div>
        </div>
    );

}

export default AdjustSalary;